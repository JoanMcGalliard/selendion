Index: src/test/java/test/concordion/internal/ExpressionTest.java
===================================================================
--- src/test/java/test/concordion/internal/ExpressionTest.java	(revision 42)
+++ src/test/java/test/concordion/internal/ExpressionTest.java	(working copy)
@@ -25,7 +25,18 @@
         , "myMethod(#var1, #var2) ? 's1' : 's2'"
         , "#var.myMethod()"
         , "#var.myMethod(#var1)"
-        , "#var.myMethod(#var1, #var2)"};
+        , "#var.myMethod(#var1, #var2)"
+        , "'string value'"
+        , "100"
+        , "0"
+        , "10.00"
+        , "-.6"
+        , "-0.6"
+        , "true"
+        , "false"
+        , "myMethod(false)"
+        , "myMethod(10)"
+        , "myMethod('strng value')" };
     
     public void testWhitespaceIsIgnoredInEvaluationExpressions() throws Exception {
         assertValidEvaluationExpression("myMethod(#var1,   #var2)");
@@ -38,6 +49,7 @@
         assertValidSetVariableExpression("  #var   =    myProp");
         assertValidSetVariableExpression("#var=myProp");
         assertValidSetVariableExpression("#var=myMethod(#var1,#var2)");
+        assertValidSetVariableExpression("#var='bob'");
     }
     
     public void testAllEvaluationExpressions() throws Exception {
Index: src/test/java/spec/examples/NewFeaturesTest.java
===================================================================
--- src/test/java/spec/examples/NewFeaturesTest.java	(revision 42)
+++ src/test/java/spec/examples/NewFeaturesTest.java	(working copy)
@@ -2,9 +2,9 @@
 
 import org.concordion.integration.junit3.ConcordionTestCase;
 
-public class DemoTest extends ConcordionTestCase {
-
+public class NewFeaturesTest extends ConcordionTestCase {
     public String greetingFor(String firstName) {
         return String.format("Hello %s!", firstName);
     }
-}
+
+}
\ No newline at end of file

Property changes on: src/test/java/spec/examples/NewFeaturesTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/resources/spec/examples/NewFeatures.html
===================================================================
--- src/test/resources/spec/examples/NewFeatures.html	(revision 0)
+++ src/test/resources/spec/examples/NewFeatures.html	(revision 0)
@@ -0,0 +1,34 @@
+<html xmlns:concordion="http://www.concordion.org/2007/concordion">
+<link href="../../../concordion.css" rel="stylesheet" type="text/css" />
+<body>
+
+    <h1>New Features</h1>
+
+
+    <h2>Literal values in set</h2>
+    <div class="example">
+        <p>In this case we just want to assert that <i concordion:set="#value='bob'">explicitly setting
+        the value to 'bob'</i> actually results in the value being set to
+        <b concordion:assertEquals="#value">bob</b>.</p>
+    </div>
+    <div class="example">
+
+    <p>
+        And that we can testing that the greeting for explitly passing 'Bob' as a parameter is still
+        <b concordion:assertEquals="greetingFor('Bob')">Hello Bob!</b>
+    </p>
+    </div>
+
+
+    <div class="example">
+        <p>In this case we just want to assert that <a href="Demo.html" concordion:set="#link=#HREF">this link</a> is
+        <b concordion:assertEquals="#link">Demo.html</b></p>
+    </div>
+
+
+    <div class="example">
+        <p>Run the test in  <a href="Demo.html" concordion:run="concordion">this link</a>. </p>
+    </div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/main/java/org/concordion/internal/ConcordionBuilder.java
===================================================================
--- src/main/java/org/concordion/internal/ConcordionBuilder.java	(revision 42)
+++ src/main/java/org/concordion/internal/ConcordionBuilder.java	(working copy)
@@ -23,14 +23,7 @@
 import org.concordion.internal.command.ThrowableCaughtListener;
 import org.concordion.internal.command.ThrowableCaughtPublisher;
 import org.concordion.internal.command.VerifyRowsCommand;
-import org.concordion.internal.listener.AssertEqualsResultRenderer;
-import org.concordion.internal.listener.BreadcrumbRenderer;
-import org.concordion.internal.listener.DocumentStructureImprover;
-import org.concordion.internal.listener.PageFooterRenderer;
-import org.concordion.internal.listener.SpecificationExporter;
-import org.concordion.internal.listener.StylesheetEmbedder;
-import org.concordion.internal.listener.ThrowableRenderer;
-import org.concordion.internal.listener.VerifyRowsResultRenderer;
+import org.concordion.internal.listener.*;
 import org.concordion.internal.util.Check;
 import org.concordion.internal.util.IOUtil;
 
@@ -48,13 +41,13 @@
     private SpecificationReader specificationReader;
     private EvaluatorFactory evaluatorFactory = new SimpleEvaluatorFactory();
     private SpecificationCommand specificationCommand = new SpecificationCommand();
-    private AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
-    private AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
-    private AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
-    private ExecuteCommand executeCommand = new ExecuteCommand();
-    private RunCommand runCommand = new RunCommand();
-    private VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
-    private EchoCommand echoCommand = new EchoCommand();
+    protected AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
+    protected AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
+    protected AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
+    protected ExecuteCommand executeCommand = new ExecuteCommand();
+    protected RunCommand runCommand = new RunCommand();
+    protected VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
+    protected EchoCommand echoCommand = new EchoCommand();
     private File baseOutputDir;
     private ThrowableCaughtPublisher throwableListenerPublisher = new ThrowableCaughtPublisher();
     
@@ -75,6 +68,7 @@
         assertTrueCommand.addAssertEqualsListener(new AssertEqualsResultRenderer());
         assertFalseCommand.addAssertEqualsListener(new AssertEqualsResultRenderer());
         verifyRowsCommand.addVerifyRowsListener(new VerifyRowsResultRenderer());
+        runCommand.addRunListener(new RunResultRenderer());
         documentParser.addDocumentParsingListener(new DocumentStructureImprover());
         String stylesheetContent = IOUtil.readResourceAsString(EMBEDDED_STYLESHEET_RESOURCE);
         documentParser.addDocumentParsingListener(new StylesheetEmbedder(stylesheetContent));
@@ -105,7 +99,7 @@
         return this;
     }
     
-    private ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
+    protected ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
         ThrowableCatchingDecorator throwableCatchingDecorator = new ThrowableCatchingDecorator(new LocalTextDecorator(command));
         throwableCatchingDecorator.addThrowableListener(throwableListenerPublisher);
         Command decoratedCommand = throwableCatchingDecorator;
Index: src/main/java/org/concordion/internal/SimpleEvaluator.java
===================================================================
--- src/main/java/org/concordion/internal/SimpleEvaluator.java	(revision 42)
+++ src/main/java/org/concordion/internal/SimpleEvaluator.java	(working copy)
@@ -25,8 +25,8 @@
     private static String PROPERTY_NAME_PATTERN = "[a-z][a-zA-Z0-9_]*";
     private static String STRING_PATTERN = "'[^']+'";
     private static String LHS_VARIABLE_PATTERN = "#" + METHOD_NAME_PATTERN;
-    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT)";
-    
+    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT|#HREF|'[^']*'|-?[0-9]+\\.?[0-9]*|\\-?.[0-9]*|true|false)";
+
     public static void validateEvaluationExpression(String expression) {
         
         // Examples of possible expressions in test.concordion.internal.ExpressionTest
@@ -50,7 +50,9 @@
         regexs.add(METHOD_CALL_PARAMS + TERNARY_STRING_RESULT);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_NO_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_PARAMS);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
         
+        
         expression = expression.trim();
         for (String regex : regexs) {
             if (expression.matches(regex)) {
@@ -71,6 +73,7 @@
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *\\)");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *" + RHS_VARIABLE_PATTERN + "(, *" + RHS_VARIABLE_PATTERN + " *)*\\)");
         
Index: src/main/java/org/concordion/internal/DocumentParser.java
===================================================================
--- src/main/java/org/concordion/internal/DocumentParser.java	(revision 42)
+++ src/main/java/org/concordion/internal/DocumentParser.java	(working copy)
@@ -57,6 +57,8 @@
                     CommandCall commandCall = new CommandCall(command, new Element(xomElement), expression, resource);
                     parentCommandCall.appendChild(commandCall);
                     parentCommandCall = commandCall;
+                } else {
+                    throw new RuntimeException("Unknown command " + commandName + " in namespace " + namespaceURI + ".");
                 }
             }
         }
Index: src/main/java/org/concordion/internal/command/LocalTextDecorator.java
===================================================================
--- src/main/java/org/concordion/internal/command/LocalTextDecorator.java	(revision 42)
+++ src/main/java/org/concordion/internal/command/LocalTextDecorator.java	(working copy)
@@ -8,6 +8,7 @@
 public class LocalTextDecorator extends AbstractCommandDecorator {
 
     private static final String TEXT_VARIABLE = "#TEXT";
+    private static final String HREF_VARIABLE = "#HREF";
 
     public LocalTextDecorator(Command command) {
         super(command);
@@ -15,12 +16,16 @@
 
     @Override
     protected void process(CommandCall commandCall, Evaluator evaluator, ResultRecorder resultRecorder, Runnable runnable) {
-        Object savedValue = evaluator.getVariable(TEXT_VARIABLE);
+        Object savedTextValue = evaluator.getVariable(TEXT_VARIABLE);
+        Object savedHrefValue = evaluator.getVariable(HREF_VARIABLE);
         try {
             evaluator.setVariable(TEXT_VARIABLE, commandCall.getElement().getText());
+            evaluator.setVariable(HREF_VARIABLE, commandCall.getElement().getAttributeValue("href"));
             runnable.run();
         } finally {
-            evaluator.setVariable(TEXT_VARIABLE, savedValue);
-        }        
+            evaluator.setVariable(TEXT_VARIABLE, savedTextValue);
+            evaluator.setVariable(HREF_VARIABLE, savedHrefValue);
+
+        }
     }
 }
