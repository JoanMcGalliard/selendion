Index: src/test/java/test/concordion/TestRig.java
===================================================================
--- src/test/java/test/concordion/TestRig.java	(revision 226)
+++ src/test/java/test/concordion/TestRig.java	Fri Mar 27 19:14:53 GMT 2009
@@ -6,8 +6,11 @@
 import org.concordion.api.EvaluatorFactory;
 import org.concordion.api.Resource;
 import org.concordion.api.ResultSummary;
+import org.concordion.api.Element;
 import org.concordion.internal.ConcordionBuilder;
 import org.concordion.internal.SimpleEvaluatorFactory;
+import nu.xom.Document;
+import nu.xom.Nodes;
 
 
 public class TestRig {
@@ -44,7 +47,11 @@
             throw new RuntimeException("Test rig failed to process specification", e);
         } 
     }
+    public Nodes unwrapFragment(Document document) {
+        return document.query("/html/body/fragment/*");
 
+    }
+
     public ProcessingResult process(String html) {
         Resource resource = new Resource("/testrig");
         withResource(resource, html);
Index: src/test/resources/spec/examples/NewFeatures.html
===================================================================
--- src/test/resources/spec/examples/NewFeatures.html	Fri Mar 27 19:13:23 GMT 2009
+++ src/test/resources/spec/examples/NewFeatures.html	Fri Mar 27 19:13:23 GMT 2009
@@ -0,0 +1,69 @@
+<html xmlns:concordion="http://www.concordion.org/2007/concordion">
+<link href="../../concordion.css" rel="stylesheet" type="text/css"/>
+<body>
+
+<h1>New Features</h1>
+<h2>Nesting inside assertEquals</h2>
+
+<div class="example">
+    <p>Set the variable #blah to <i concordion:set="#blah">Hooray!</i> and then
+        assert it equals <b concordion:assertEquals="#blah"><i concordion:echo="#blah"></i></b> itself.
+    </p>
+</div>
+
+<h2>Literal values in set</h2>
+
+<div class="example">
+    <p>In this case we just want to assert that <i concordion:set="#value='bob'">explicitly setting
+        the value to 'bob'</i> actually results in the value being set to
+        <b concordion:assertEquals="#value">bob</b>.</p>
+</div>
+<div class="example">
+
+    <p>
+        And that explicitly passing 'Bob' as a parameter still gives a greeting of
+        <b concordion:assertEquals="greetingFor('Bob')">Hello Bob!</b>
+    </p>
+</div>
+
+
+<div class="example">
+    <p>In this case we just want to assert that <a href="Demo.html" concordion:set="#link=#HREF">this link</a> is
+        <b concordion:assertEquals="#link">Demo.html</b></p>
+
+    <p>and similarly in a table:</p>
+    <table concordion:execute="greetingFor(#val1)">
+        <tr>
+            <th concordion:set="#val1">Set val1</th>
+            <th concordion:assertEquals="#val1">So val1 should equal this</th>
+            <th concordion:set="#val2=#TEXT">Set val2 to #TEXT</th>
+            <th concordion:assertEquals="#val2">So val2 should equal this</th>
+            <th concordion:set="#val3=#HREF">Set val3 to #HREF</th>
+            <th concordion:assertEquals="#val3">So val3 should equal this</th>
+            <th concordion:set="#val4">Set val4</th>
+            <th concordion:assertEquals="#val4">So val4 should equal this</th>
+
+        </tr>
+        <tr>
+            <td>text1</td>
+            <td>text1</td>
+            <td><a href="href2.html">text2</a></td>
+            <td>text2</td>
+            <td><a href="href3.html">text3</a></td>
+            <td>href3.html</td>
+            <td><a href="href4.html">text4</a></td>
+            <td><a href="href4.html">text4</a></td>
+
+        </tr>
+    </table>
+</div>
+
+
+<div class="example">
+    <p>Run the test in <a href="Demo.html" concordion:run="concordion">this link</a>. </p>
+</div>
+
+
+
+</body>
+</html>
Index: src/main/java/org/concordion/internal/ConcordionBuilder.java
===================================================================
--- src/main/java/org/concordion/internal/ConcordionBuilder.java	(revision 226)
+++ src/main/java/org/concordion/internal/ConcordionBuilder.java	Fri Mar 27 19:14:53 GMT 2009
@@ -41,21 +41,21 @@
     private static final String PROPERTY_OUTPUT_DIR = "concordion.output.dir";
     private static final String EMBEDDED_STYLESHEET_RESOURCE = "/org/concordion/internal/resource/embedded.css";
     
-    private SpecificationLocator specificationLocator = new ClassNameBasedSpecificationLocator();
-    private Source source = new ClassPathSource();
-    private Target target = null;
-    private CommandRegistry commandRegistry = new CommandRegistry();
-    private DocumentParser documentParser = new DocumentParser(commandRegistry);
+    protected SpecificationLocator specificationLocator = new ClassNameBasedSpecificationLocator();
+    protected Source source = new ClassPathSource();
+    protected Target target = null;
+    protected CommandRegistry commandRegistry = new CommandRegistry();
+    protected DocumentParser documentParser = new DocumentParser(commandRegistry);
     private SpecificationReader specificationReader;
-    private EvaluatorFactory evaluatorFactory = new SimpleEvaluatorFactory();
+    protected EvaluatorFactory evaluatorFactory = new SimpleEvaluatorFactory();
     private SpecificationCommand specificationCommand = new SpecificationCommand();
-    private AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
-    private AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
-    private AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
-    private ExecuteCommand executeCommand = new ExecuteCommand();
-    private RunCommand runCommand = new RunCommand();
-    private VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
-    private EchoCommand echoCommand = new EchoCommand();
+    protected AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
+    protected AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
+    protected AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
+    protected ExecuteCommand executeCommand = new ExecuteCommand();
+    protected RunCommand runCommand = new RunCommand();
+    protected VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
+    protected EchoCommand echoCommand = new EchoCommand();
     private File baseOutputDir;
     private ThrowableCaughtPublisher throwableListenerPublisher = new ThrowableCaughtPublisher();
     
@@ -107,7 +107,7 @@
         return this;
     }
     
-    private ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
+    protected ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
         ThrowableCatchingDecorator throwableCatchingDecorator = new ThrowableCatchingDecorator(new LocalTextDecorator(command));
         throwableCatchingDecorator.addThrowableListener(throwableListenerPublisher);
         Command decoratedCommand = throwableCatchingDecorator;
@@ -140,7 +140,7 @@
         return new Concordion(specificationLocator, specificationReader, evaluatorFactory);
     }
 
-    private File getBaseOutputDir() {
+    protected File getBaseOutputDir() {
         if (baseOutputDir != null) {
             return baseOutputDir;
         }
Index: src/main/java/org/concordion/internal/Table.java
===================================================================
--- src/main/java/org/concordion/internal/Table.java	(revision 226)
+++ src/main/java/org/concordion/internal/Table.java	Fri Mar 27 19:15:52 GMT 2009
@@ -41,15 +41,23 @@
         }
         return detailRows.toArray(new Row[detailRows.size()]);
     }
-    
+
     private Row[] getRows() {
         List<Row> rows = new ArrayList<Row>();
-        for (Element rowElement : tableElement.getDescendantElements("tr")) {
-            rows.add(new Row(rowElement));
+        for (Element subElement : tableElement.getChildElements()) {
+            if (subElement.getLocalName().equals("tr")) {
+                rows.add(new Row(subElement));
+            } else if (subElement.getLocalName().equals("tbody") || subElement.getLocalName().equals("thead")) {
+                for (Element subSubElement : subElement.getChildElements()) {
+                    if (subSubElement.getLocalName().equals("tr")) {
+                        rows.add(new Row(subSubElement));
-        }
+                    }
+                }
+            }
+        }
         return rows.toArray(new Row[rows.size()]);
     }
-    
+
     public Row addDetailRow() {
         Element rowElement = new Element("tr");
         
Index: src/main/java/org/concordion/api/Evaluator.java
===================================================================
--- src/main/java/org/concordion/api/Evaluator.java	(revision 226)
+++ src/main/java/org/concordion/api/Evaluator.java	Fri Mar 27 19:15:52 GMT 2009
@@ -1,5 +1,7 @@
 package org.concordion.api;
 
+import java.util.Set;
+
 public interface Evaluator {
 
     Object getVariable(String variableName);
@@ -7,4 +9,6 @@
     void setVariable(String variableName, Object value);
 
     Object evaluate(String expression);
+
+    Set getKeys();
 }
Index: src/test/java/test/concordion/StubEvaluator.java
===================================================================
--- src/test/java/test/concordion/StubEvaluator.java	(revision 226)
+++ src/test/java/test/concordion/StubEvaluator.java	Fri Mar 27 19:10:19 GMT 2009
@@ -3,6 +3,8 @@
 import org.concordion.api.Evaluator;
 import org.concordion.api.EvaluatorFactory;
 
+import java.util.Set;
+
 public class StubEvaluator implements Evaluator, EvaluatorFactory {
 
     private Object evaluationResult = null;
@@ -18,6 +20,10 @@
         return evaluationResult;
     }
 
+    public Set getKeys() {
+        return null;
+    }
+
     public Object getVariable(String variableName) {
         return null;
     }
Index: src/main/java/org/concordion/internal/command/AssertEqualsCommand.java
===================================================================
--- src/main/java/org/concordion/internal/command/AssertEqualsCommand.java	(revision 226)
+++ src/main/java/org/concordion/internal/command/AssertEqualsCommand.java	Fri Mar 27 19:14:53 GMT 2009
@@ -8,6 +8,7 @@
 import org.concordion.api.ResultRecorder;
 import org.concordion.internal.BrowserStyleWhitespaceComparator;
 import org.concordion.internal.CommandCall;
+import org.concordion.internal.CommandCallList;
 import org.concordion.internal.util.Announcer;
 import org.concordion.internal.util.Check;
 
@@ -34,13 +35,16 @@
     
     @Override
     public void verify(CommandCall commandCall, Evaluator evaluator, ResultRecorder resultRecorder) {
-        Check.isFalse(commandCall.hasChildCommands(), "Nesting commands inside an 'assertEquals' is not supported");
+   CommandCallList childCommands = commandCall.getChildren();
-        
+
+            childCommands.setUp(evaluator, resultRecorder);
+        childCommands.execute(evaluator, resultRecorder);
+        childCommands.verify(evaluator, resultRecorder);
         Element element = commandCall.getElement();
         
         Object actual = evaluator.evaluate(commandCall.getExpression());
         String expected = element.getText();
-        
+
         if (comparator.compare(actual, expected) == 0) {
             resultRecorder.record(Result.SUCCESS);
             announceSuccess(element);
Index: src/main/java/org/concordion/internal/listener/ThrowableRenderer.java
===================================================================
--- src/main/java/org/concordion/internal/listener/ThrowableRenderer.java	(revision 226)
+++ src/main/java/org/concordion/internal/listener/ThrowableRenderer.java	Fri Mar 27 19:14:52 GMT 2009
@@ -22,17 +22,19 @@
         
         Element element = event.getElement();
         element.appendChild(expectedSpan(element));
-        
+
         // Special handling for <a> tags to avoid the stack-trace being inside the link text
         if (element.getLocalName().equals("a")) {
-            Element div = new Element("div"); 
+            Element div = new Element("div");
             element.appendSister(div);
             element = div;
         }
         element.appendChild(exceptionMessage(event.getThrowable().getMessage()));
-        element.appendChild(stackTraceTogglingButton());
-        element.appendChild(stackTrace(event.getThrowable(), event.getExpression()));
+        Element span = new Element("span");
+        span.appendChild(stackTraceTogglingButton());
+        span.appendChild(stackTrace(event.getThrowable(), event.getExpression()));
+        element.insertAfter(span);
-        
+
         ensureDocumentHasTogglingScript(element);
     }
 
Index: src/test/java/spec/concordion/results/exception/ExceptionTest.java
===================================================================
--- src/test/java/spec/concordion/results/exception/ExceptionTest.java	(revision 226)
+++ src/test/java/spec/concordion/results/exception/ExceptionTest.java	Fri Mar 27 19:15:52 GMT 2009
@@ -9,6 +9,8 @@
 import org.concordion.internal.listener.ThrowableRenderer;
 
 import test.concordion.TestRig;
+import nu.xom.Document;
+import nu.xom.Nodes;
 
 public class ExceptionTest extends ConcordionTestCase {
     
@@ -24,15 +26,22 @@
     public String markAsException(String fragment, String expression, String errorMessage) {
         Throwable t = new Throwable(errorMessage);
         t.setStackTrace(stackTraceElements.toArray(new StackTraceElement[0]));
-        
+
-        Element element = new Element((nu.xom.Element) new TestRig()
+        Document document =  new TestRig()
             .processFragment(fragment)
-            .getXOMDocument()
+            .getXOMDocument();
+
+        Element element = new Element((nu.xom.Element) document
             .query("//p")
             .get(0));
             
         new ThrowableRenderer().throwableCaught(new ThrowableCaughtEvent(t, element, expression));
         
-        return element.toXML();
+        Nodes nodes = new TestRig().unwrapFragment(document);
+        String ret = "";
+        for (int i = 0; i< nodes.size(); i++) {
+            ret = ret + nodes.get(i).toXML();
-    }
+        }
+        return ret;
-}
+    }
+}
Index: src/test/java/test/concordion/internal/SimpleEvaluatorTest.java
===================================================================
--- src/test/java/test/concordion/internal/SimpleEvaluatorTest.java	(revision 226)
+++ src/test/java/test/concordion/internal/SimpleEvaluatorTest.java	Fri Mar 27 19:13:23 GMT 2009
@@ -69,6 +69,7 @@
     public void testAccessInnerVariable() {
         evaluator.setVariable("#result", this);
         assertEquals(1, evaluator.evaluate("#result.outer.inner.value"));
+        assertEquals(new Integer(1), evaluator.evaluate("#value=#result.outer.inner.value"));
     }
 
     public void testEvaluationsCanCreateVariables() throws Exception {
Index: src/test/java/test/concordion/internal/TableTest.java
===================================================================
--- src/test/java/test/concordion/internal/TableTest.java	Fri Mar 27 19:15:52 GMT 2009
+++ src/test/java/test/concordion/internal/TableTest.java	Fri Mar 27 19:15:52 GMT 2009
@@ -0,0 +1,72 @@
+package test.concordion.internal;
+
+import junit.framework.TestCase;
+import org.concordion.internal.Table;
+import org.concordion.api.Element;
+
+public class TableTest extends TestCase {
+    public void testGetLastHeaderRow() {
+        Element tableElement = new Element("table");
+        Element header = new Element("tr");
+        header.appendChild(new Element("th").appendText("Col head1"));
+        header.appendChild(new Element("th").appendText("Col head2"));
+        tableElement.appendChild(header);
+        Element row = new Element("tr");
+        row.appendChild(new Element("td").appendText("Col 1"));
+        row.appendChild(new Element("td").appendText("Col 2"));
+        tableElement.appendChild(row);
+        Table table = new Table(tableElement);
+
+        // Get header of plain table
+        assertEquals(table.getLastHeaderRow().getElement(), header);
+
+
+
+        row = new Element("tr");
+        row.appendChild(new Element("td").appendText("Col 1"));
+        row.appendChild(subTable());
+        tableElement.appendChild(row);
+
+        // Get header of table with sub table
+        assertEquals(table.getLastHeaderRow().getElement(), header);
+
+        tableElement = new Element("table");
+        Element thead = new Element("thead");
+        Element tbody = new Element("tbody");
+        header = new Element("tr");
+        header.appendChild(new Element("th").appendText("Col head1"));
+        header.appendChild(new Element("th").appendText("Col head2"));
+        thead.appendChild(header);
+        tableElement.appendChild(thead);
+        row = new Element("tr");
+        row.appendChild(new Element("td").appendText("Col 1"));
+        row.appendChild(new Element("td").appendText("Col 2"));
+        tbody.appendChild(row);
+        tableElement.appendChild(tbody);
+        table = new Table(tableElement);
+
+        // Get header of table with tbody/thead
+        assertEquals(table.getLastHeaderRow().getElement(), header);
+
+
+        row = new Element("tr");
+        row.appendChild(new Element("td").appendText("Col 1"));
+        row.appendChild(subTable());
+        tbody.appendChild(row);
+
+        // Get header of table with tbody/thead and sub table
+        assertEquals(table.getLastHeaderRow().getElement(), header);
+    }
+
+    private Element subTable() {
+         Element tableElement = new Element("table");
+        Element subTableHeader = new Element("tr");
+        subTableHeader.appendChild(new Element("th").appendText("Sub Table Header"));
+        tableElement.appendChild(subTableHeader);
+        Element row = new Element("tr");
+        row.appendChild(new Element("td").appendText("Col 1"));
+        tableElement.appendChild(row);
+        return tableElement;
+    }
+
+}
Index: src/main/java/org/concordion/internal/SimpleEvaluator.java
===================================================================
--- src/main/java/org/concordion/internal/SimpleEvaluator.java	(revision 226)
+++ src/main/java/org/concordion/internal/SimpleEvaluator.java	Fri Mar 27 19:15:52 GMT 2009
@@ -25,8 +25,8 @@
     private static String PROPERTY_NAME_PATTERN = "[a-z][a-zA-Z0-9_]*";
     private static String STRING_PATTERN = "'[^']+'";
     private static String LHS_VARIABLE_PATTERN = "#" + METHOD_NAME_PATTERN;
-    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT|#HREF)";
+    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT|#HREF|'[^']*'|-?[0-9]+\\.?[0-9]*|\\-?.[0-9]*|true|false)";
-    
+
     public static void validateEvaluationExpression(String expression) {
         
         // Examples of possible expressions in test.concordion.internal.ExpressionTest
@@ -41,6 +41,7 @@
         regexs.add(METHOD_CALL_PARAMS);
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "(\\." + PROPERTY_NAME_PATTERN +  ")+");
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + LHS_VARIABLE_PATTERN + "(\\." + PROPERTY_NAME_PATTERN +  ")+");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_CALL_NO_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_CALL_PARAMS);
@@ -50,7 +51,9 @@
         regexs.add(METHOD_CALL_PARAMS + TERNARY_STRING_RESULT);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_NO_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_PARAMS);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
-        
+
+
         expression = expression.trim();
         for (String regex : regexs) {
             if (expression.matches(regex)) {
@@ -71,6 +74,7 @@
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *\\)");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *" + RHS_VARIABLE_PATTERN + "(, *" + RHS_VARIABLE_PATTERN + " *)*\\)");
         
Index: src/test/resources/spec/concordion/results/exception/Exception.html
===================================================================
--- src/test/resources/spec/concordion/results/exception/Exception.html	(revision 226)
+++ src/test/resources/spec/concordion/results/exception/Exception.html	Fri Mar 27 19:10:19 GMT 2009
@@ -66,6 +66,8 @@
 &lt;del class="expected"&gt;some text&lt;/del&gt; _
 &lt;/span&gt; _
 &lt;span class="exceptionMessage"&gt;My error message&lt;/span&gt; _
+&lt;/p&gt; _
+&lt;span&gt; _
 &lt;input class="stackTraceButton" id="stackTraceButton1" type="button" _
  onclick="javascript:toggleStackTrace('1')" value="View Stack" /&gt; _
 &lt;span class="stackTrace" id="stackTrace1"&gt; _
@@ -75,7 +77,7 @@
 &lt;span class="stackTraceEntry"&gt;at sun.reflect.NativeMethodAccessorImpl.invoke0 (Unknown Source)&lt;/span&gt; _
 &lt;span class="stackTraceEntry"&gt;at junit.framework.TestCase.runTest (TestCase.java:164)&lt;/span&gt; _
 &lt;/span&gt; _
-&lt;/p&gt;
+&lt;/span&gt;
 </pre>
 
 
@@ -95,4 +97,4 @@
     </ul>        
 
 </body>
-</html>
\ No newline at end of file
+</html>
Index: src/main/java/org/concordion/internal/OgnlEvaluator.java
===================================================================
--- src/main/java/org/concordion/internal/OgnlEvaluator.java	(revision 226)
+++ src/main/java/org/concordion/internal/OgnlEvaluator.java	Fri Mar 27 19:10:19 GMT 2009
@@ -8,6 +8,8 @@
 import org.concordion.api.Evaluator;
 import org.concordion.internal.util.Check;
 
+import java.util.Set;
+
 public class OgnlEvaluator implements Evaluator {
 
     private Object rootObject;
@@ -35,6 +37,10 @@
         }
     }
 
+    public Set getKeys() {
+        return ognlContext.keySet();
+    }
+
     private InvalidExpressionException invalidExpressionException(OgnlException e) {
         Throwable cause = e;
         
Index: src/test/java/test/concordion/internal/ExpressionTest.java
===================================================================
--- src/test/java/test/concordion/internal/ExpressionTest.java	(revision 226)
+++ src/test/java/test/concordion/internal/ExpressionTest.java	Fri Mar 27 19:13:23 GMT 2009
@@ -25,7 +25,18 @@
         , "myMethod(#var1, #var2) ? 's1' : 's2'"
         , "#var.myMethod()"
         , "#var.myMethod(#var1)"
-        , "#var.myMethod(#var1, #var2)"};
+        , "#var.myMethod(#var1, #var2)"
+        , "'string value'"
+        , "100"
+        , "0"
+        , "10.00"
+        , "-.6"
+        , "-0.6"
+        , "true"
+        , "false"
+        , "myMethod(false)"
+        , "myMethod(10)"
+        , "myMethod('strng value')" };
     
     public void testWhitespaceIsIgnoredInEvaluationExpressions() throws Exception {
         assertValidEvaluationExpression("myMethod(#var1,   #var2)");
@@ -38,6 +49,7 @@
         assertValidSetVariableExpression("  #var   =    myProp");
         assertValidSetVariableExpression("#var=myProp");
         assertValidSetVariableExpression("#var=myMethod(#var1,#var2)");
+        assertValidSetVariableExpression("#var='bob'");
     }
     
     public void testAllEvaluationExpressions() throws Exception {
Index: src/main/java/org/concordion/internal/DocumentParser.java
===================================================================
--- src/main/java/org/concordion/internal/DocumentParser.java	(revision 226)
+++ src/main/java/org/concordion/internal/DocumentParser.java	Fri Mar 27 19:15:52 GMT 2009
@@ -41,7 +41,7 @@
         return new XMLSpecification(rootCommandCall);
     }
 
-    private void generateCommandCallTree(nu.xom.Element xomElement, CommandCall parentCommandCall, Resource resource) {
+    public void generateCommandCallTree(nu.xom.Element xomElement, CommandCall parentCommandCall, Resource resource) {
         boolean commandIsAssigned = false;
         for (int i = 0; i < xomElement.getAttributeCount(); i++) {
             Attribute attribute = xomElement.getAttribute(i);
@@ -57,6 +57,8 @@
                     CommandCall commandCall = new CommandCall(command, new Element(xomElement), expression, resource);
                     parentCommandCall.appendChild(commandCall);
                     parentCommandCall = commandCall;
+                } else {
+                    throw new RuntimeException("Unknown command " + commandName + " in namespace " + namespaceURI + ".");
                 }
             }
         }
Index: src/main/java/org/concordion/api/Element.java
===================================================================
--- src/main/java/org/concordion/api/Element.java	(revision 226)
+++ src/main/java/org/concordion/api/Element.java	Fri Mar 27 19:37:31 GMT 2009
@@ -3,10 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import nu.xom.Attribute;
-import nu.xom.Elements;
-import nu.xom.Node;
-import nu.xom.Nodes;
+import nu.xom.*;
 
 public final class Element {
 
@@ -23,10 +20,24 @@
         this.xomElement = xomElement;
     }
 
+    public nu.xom.Element getXomElement () {
+        return this.xomElement;
+    }
+
     public String getText() {
         return xomElement.getValue();
     }
 
+    public void insertAfter(Element insert) {
+        ParentNode parent = xomElement.getParent();
+        for (int i=0; i < parent.getChildCount() ; i++) {
+            if (parent.getChild(i).equals(xomElement)) {
+                parent.insertChild(insert.xomElement, i+1) ;
+                break;
+            }
+        }
+    }
+
     public Element addStyleClass(String styleClass) {
         String currentClass = getAttributeValue("class");
         if (currentClass != null) {
@@ -106,6 +117,9 @@
     public Element getRootElement() {
         return new Element(xomElement.getDocument().getRootElement());
     }
+    public Element getParent() {
+        return new Element((nu.xom.Element) xomElement.getParent());
+    }
 
     public Element getFirstChildElement(String name) {
         nu.xom.Element body = xomElement.getFirstChildElement(name);
@@ -185,6 +199,9 @@
         Element[] descendantElements = getDescendantElements(name);
         return descendantElements.length == 0 ? null : descendantElements[0];
     }
+     public Element copy() {
+        return new Element((nu.xom.Element) xomElement.copy());
+    }
 
     public void appendSister(Element element) {
         nu.xom.Element xomParentElement = (nu.xom.Element) xomElement.getParent();
Index: src/test/java/spec/examples/NewFeaturesTest.java
===================================================================
--- src/test/java/spec/examples/NewFeaturesTest.java	Fri Mar 27 19:13:23 GMT 2009
+++ src/test/java/spec/examples/NewFeaturesTest.java	Fri Mar 27 19:13:23 GMT 2009
@@ -0,0 +1,10 @@
+package spec.examples;
+
+import org.concordion.integration.junit3.ConcordionTestCase;
+
+public class NewFeaturesTest extends ConcordionTestCase {
+    public String greetingFor(String firstName) {
+        return String.format("Hello %s!", firstName);
+    }
+
+}
