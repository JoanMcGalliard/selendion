Index: src/test/java/test/concordion/StubEvaluator.java
===================================================================
--- src/test/java/test/concordion/StubEvaluator.java	(revision 42)
+++ src/test/java/test/concordion/StubEvaluator.java	(working copy)
@@ -3,6 +3,8 @@
 import org.concordion.api.Evaluator;
 import org.concordion.api.EvaluatorFactory;
 
+import java.util.Set;
+
 public class StubEvaluator implements Evaluator, EvaluatorFactory {
 
     private Object evaluationResult = null;
@@ -18,6 +20,10 @@
         return evaluationResult;
     }
 
+    public Set getKeys() {
+        return null;
+    }
+
     public Object getVariable(String variableName) {
         return null;
     }
Index: src/test/java/test/concordion/internal/ExpressionTest.java
===================================================================
--- src/test/java/test/concordion/internal/ExpressionTest.java	(revision 42)
+++ src/test/java/test/concordion/internal/ExpressionTest.java	(working copy)
@@ -25,7 +25,18 @@
         , "myMethod(#var1, #var2) ? 's1' : 's2'"
         , "#var.myMethod()"
         , "#var.myMethod(#var1)"
-        , "#var.myMethod(#var1, #var2)"};
+        , "#var.myMethod(#var1, #var2)"
+        , "'string value'"
+        , "100"
+        , "0"
+        , "10.00"
+        , "-.6"
+        , "-0.6"
+        , "true"
+        , "false"
+        , "myMethod(false)"
+        , "myMethod(10)"
+        , "myMethod('strng value')" };
     
     public void testWhitespaceIsIgnoredInEvaluationExpressions() throws Exception {
         assertValidEvaluationExpression("myMethod(#var1,   #var2)");
@@ -38,6 +49,7 @@
         assertValidSetVariableExpression("  #var   =    myProp");
         assertValidSetVariableExpression("#var=myProp");
         assertValidSetVariableExpression("#var=myMethod(#var1,#var2)");
+        assertValidSetVariableExpression("#var='bob'");
     }
     
     public void testAllEvaluationExpressions() throws Exception {
Index: src/main/java/org/concordion/api/Evaluator.java
===================================================================
--- src/main/java/org/concordion/api/Evaluator.java	(revision 42)
+++ src/main/java/org/concordion/api/Evaluator.java	(working copy)
@@ -1,5 +1,7 @@
 package org.concordion.api;
 
+import java.util.Set;
+
 public interface Evaluator {
 
     Object getVariable(String variableName);
@@ -7,4 +9,6 @@
     void setVariable(String variableName, Object value);
 
     Object evaluate(String expression);
+
+    Set getKeys();
 }
Index: src/main/java/org/concordion/api/Element.java
===================================================================
--- src/main/java/org/concordion/api/Element.java	(revision 42)
+++ src/main/java/org/concordion/api/Element.java	(working copy)
@@ -3,10 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import nu.xom.Attribute;
-import nu.xom.Elements;
-import nu.xom.Node;
-import nu.xom.Nodes;
+import nu.xom.*;
 
 public final class Element {
 
@@ -27,6 +24,16 @@
         return xomElement.getValue();
     }
 
+    public void insertAfter(Element insert) {
+        ParentNode parent = xomElement.getParent();
+        for (int i=0; i < parent.getChildCount() ; i++) {
+            if (parent.getChild(i).equals(xomElement)) {
+                parent.insertChild(insert.xomElement, i+1) ;
+                break;
+            }
+        }
+    }
+
     public Element addStyleClass(String styleClass) {
         String currentClass = getAttributeValue("class");
         if (currentClass != null) {
@@ -106,6 +113,9 @@
     public Element getRootElement() {
         return new Element(xomElement.getDocument().getRootElement());
     }
+    public Element getParent() {
+        return new Element((nu.xom.Element) xomElement.getParent());
+    }
 
     public Element getFirstChildElement(String name) {
         nu.xom.Element body = xomElement.getFirstChildElement(name);
Index: src/main/java/org/concordion/internal/ConcordionBuilder.java
===================================================================
--- src/main/java/org/concordion/internal/ConcordionBuilder.java	(revision 42)
+++ src/main/java/org/concordion/internal/ConcordionBuilder.java	(working copy)
@@ -23,14 +23,7 @@
 import org.concordion.internal.command.ThrowableCaughtListener;
 import org.concordion.internal.command.ThrowableCaughtPublisher;
 import org.concordion.internal.command.VerifyRowsCommand;
-import org.concordion.internal.listener.AssertEqualsResultRenderer;
-import org.concordion.internal.listener.BreadcrumbRenderer;
-import org.concordion.internal.listener.DocumentStructureImprover;
-import org.concordion.internal.listener.PageFooterRenderer;
-import org.concordion.internal.listener.SpecificationExporter;
-import org.concordion.internal.listener.StylesheetEmbedder;
-import org.concordion.internal.listener.ThrowableRenderer;
-import org.concordion.internal.listener.VerifyRowsResultRenderer;
+import org.concordion.internal.listener.*;
 import org.concordion.internal.util.Check;
 import org.concordion.internal.util.IOUtil;
 
@@ -39,22 +32,22 @@
     public static final String NAMESPACE_CONCORDION_2007 = "http://www.concordion.org/2007/concordion";
     private static final String PROPERTY_OUTPUT_DIR = "concordion.output.dir";
     private static final String EMBEDDED_STYLESHEET_RESOURCE = "/org/concordion/internal/resource/embedded.css";
-    
+
     private SpecificationLocator specificationLocator = new ClassNameBasedSpecificationLocator();
     private Source source = new ClassPathSource();
     private Target target = null;
     private CommandRegistry commandRegistry = new CommandRegistry();
-    private DocumentParser documentParser = new DocumentParser(commandRegistry);
+    protected DocumentParser documentParser = new DocumentParser(commandRegistry);
     private SpecificationReader specificationReader;
     private EvaluatorFactory evaluatorFactory = new SimpleEvaluatorFactory();
     private SpecificationCommand specificationCommand = new SpecificationCommand();
-    private AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
-    private AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
-    private AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
-    private ExecuteCommand executeCommand = new ExecuteCommand();
-    private RunCommand runCommand = new RunCommand();
-    private VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
-    private EchoCommand echoCommand = new EchoCommand();
+    protected AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
+    protected AssertTrueCommand assertTrueCommand = new AssertTrueCommand();
+    protected AssertFalseCommand assertFalseCommand = new AssertFalseCommand();
+    protected ExecuteCommand executeCommand = new ExecuteCommand();
+    protected RunCommand runCommand = new RunCommand();
+    protected VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand();
+    protected EchoCommand echoCommand = new EchoCommand();
     private File baseOutputDir;
     private ThrowableCaughtPublisher throwableListenerPublisher = new ThrowableCaughtPublisher();
     
@@ -75,6 +68,7 @@
         assertTrueCommand.addAssertEqualsListener(new AssertEqualsResultRenderer());
         assertFalseCommand.addAssertEqualsListener(new AssertEqualsResultRenderer());
         verifyRowsCommand.addVerifyRowsListener(new VerifyRowsResultRenderer());
+        runCommand.addRunListener(new RunResultRenderer());
         documentParser.addDocumentParsingListener(new DocumentStructureImprover());
         String stylesheetContent = IOUtil.readResourceAsString(EMBEDDED_STYLESHEET_RESOURCE);
         documentParser.addDocumentParsingListener(new StylesheetEmbedder(stylesheetContent));
@@ -105,7 +99,7 @@
         return this;
     }
     
-    private ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
+    protected ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
         ThrowableCatchingDecorator throwableCatchingDecorator = new ThrowableCatchingDecorator(new LocalTextDecorator(command));
         throwableCatchingDecorator.addThrowableListener(throwableListenerPublisher);
         Command decoratedCommand = throwableCatchingDecorator;
Index: src/main/java/org/concordion/internal/SimpleEvaluator.java
===================================================================
--- src/main/java/org/concordion/internal/SimpleEvaluator.java	(revision 42)
+++ src/main/java/org/concordion/internal/SimpleEvaluator.java	(working copy)
@@ -25,8 +25,8 @@
     private static String PROPERTY_NAME_PATTERN = "[a-z][a-zA-Z0-9_]*";
     private static String STRING_PATTERN = "'[^']+'";
     private static String LHS_VARIABLE_PATTERN = "#" + METHOD_NAME_PATTERN;
-    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT)";
-    
+    private static String RHS_VARIABLE_PATTERN = "(" + LHS_VARIABLE_PATTERN + "|#TEXT|#HREF|'[^']*'|-?[0-9]+\\.?[0-9]*|\\-?.[0-9]*|true|false)";
+
     public static void validateEvaluationExpression(String expression) {
         
         // Examples of possible expressions in test.concordion.internal.ExpressionTest
@@ -50,7 +50,9 @@
         regexs.add(METHOD_CALL_PARAMS + TERNARY_STRING_RESULT);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_NO_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + METHOD_CALL_PARAMS);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
         
+        
         expression = expression.trim();
         for (String regex : regexs) {
             if (expression.matches(regex)) {
@@ -71,6 +73,7 @@
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *\\)");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *" + RHS_VARIABLE_PATTERN + "(, *" + RHS_VARIABLE_PATTERN + " *)*\\)");
         
Index: src/main/java/org/concordion/internal/OgnlEvaluator.java
===================================================================
--- src/main/java/org/concordion/internal/OgnlEvaluator.java	(revision 42)
+++ src/main/java/org/concordion/internal/OgnlEvaluator.java	(working copy)
@@ -8,6 +8,8 @@
 import org.concordion.api.Evaluator;
 import org.concordion.internal.util.Check;
 
+import java.util.Set;
+
 public class OgnlEvaluator implements Evaluator {
 
     private Object rootObject;
@@ -35,6 +37,10 @@
         }
     }
 
+    public Set getKeys() {
+        return ognlContext.keySet();
+    }
+
     private InvalidExpressionException invalidExpressionException(OgnlException e) {
         Throwable cause = e;
         
Index: src/main/java/org/concordion/internal/DocumentParser.java
===================================================================
--- src/main/java/org/concordion/internal/DocumentParser.java	(revision 42)
+++ src/main/java/org/concordion/internal/DocumentParser.java	(working copy)
@@ -57,6 +57,8 @@
                     CommandCall commandCall = new CommandCall(command, new Element(xomElement), expression, resource);
                     parentCommandCall.appendChild(commandCall);
                     parentCommandCall = commandCall;
+                } else {
+                    throw new RuntimeException("Unknown command " + commandName + " in namespace " + namespaceURI + ".");
                 }
             }
         }
Index: src/main/java/org/concordion/internal/command/LocalTextDecorator.java
===================================================================
--- src/main/java/org/concordion/internal/command/LocalTextDecorator.java	(revision 42)
+++ src/main/java/org/concordion/internal/command/LocalTextDecorator.java	(working copy)
@@ -8,6 +8,7 @@
 public class LocalTextDecorator extends AbstractCommandDecorator {
 
     private static final String TEXT_VARIABLE = "#TEXT";
+    private static final String HREF_VARIABLE = "#HREF";
 
     public LocalTextDecorator(Command command) {
         super(command);
@@ -15,12 +16,16 @@
 
     @Override
     protected void process(CommandCall commandCall, Evaluator evaluator, ResultRecorder resultRecorder, Runnable runnable) {
-        Object savedValue = evaluator.getVariable(TEXT_VARIABLE);
+        Object savedTextValue = evaluator.getVariable(TEXT_VARIABLE);
+        Object savedHrefValue = evaluator.getVariable(HREF_VARIABLE);
         try {
             evaluator.setVariable(TEXT_VARIABLE, commandCall.getElement().getText());
+            evaluator.setVariable(HREF_VARIABLE, commandCall.getElement().getAttributeValue("href"));
             runnable.run();
         } finally {
-            evaluator.setVariable(TEXT_VARIABLE, savedValue);
-        }        
+            evaluator.setVariable(TEXT_VARIABLE, savedTextValue);
+            evaluator.setVariable(HREF_VARIABLE, savedHrefValue);
+
+        }
     }
 }
