Index: src/org/concordion/api/ResultSummary.java
===================================================================
--- src/org/concordion/api/ResultSummary.java	(revision 34)
+++ src/org/concordion/api/ResultSummary.java	Sat Sep 27 07:58:15 BST 2008
@@ -4,7 +4,7 @@
 
 public interface ResultSummary {
 
-    void assertIsSatisfied();
+    void assertIsSatisfied(boolean isExpectToPass);
 
     boolean hasExceptions();
 
Index: spec/spec/examples/Demo.html
===================================================================
--- spec/spec/examples/Demo.html	(revision 34)
+++ spec/spec/examples/Demo.html	Tue Sep 30 19:55:56 BST 2008
@@ -28,6 +28,11 @@
             The first name <span concordion:assertTrue="#firstName.startsWith(#letter)">starts 
             with <b concordion:set="#letter">B</b></span>.
         </p>
+
+         <p>
+            If he logs in again, the greeting will still  be:
+            <b concordion:assertEquals="greetingFor('Bob')">Hello Bob!</b>
+        </p>
     </div>
 
 </body>
Index: src/org/concordion/internal/SummarizingResultRecorder.java
===================================================================
--- src/org/concordion/internal/SummarizingResultRecorder.java	(revision 34)
+++ src/org/concordion/internal/SummarizingResultRecorder.java	Sat Sep 27 08:11:32 BST 2008
@@ -12,18 +12,22 @@
 
     private List<Result> recordedResults = new ArrayList<Result>();
 
+
     public void record(Result result) {
         recordedResults.add(result);
     }
 
-    public void assertIsSatisfied() {
-        if (hasFailures()) {
+    public void assertIsSatisfied(boolean isExpectedToPass) {
+        if (hasFailures() && isExpectedToPass) {
             throw new AssertionError("Specification has failure(s). See output HTML for details.");
         }
-        if (hasExceptions()) {
+        if (hasExceptions() && isExpectedToPass) {
             throw new AssertionError("Specification has exception(s). See output HTML for details.");
         }
+        if (!isExpectedToPass && !hasExceptions() && !hasFailures()) {
+            throw new AssertionError("Test has no failures or exceptions but is not expected to pass.");
-    }
+        }
+    }
 
     public boolean hasExceptions() {
         return getExceptionCount() > 0;
Index: spec/spec/examples/NotExpectedToPass.html
===================================================================
--- spec/spec/examples/NotExpectedToPass.html	Sat Sep 27 08:07:40 BST 2008
+++ spec/spec/examples/NotExpectedToPass.html	Sat Sep 27 08:07:40 BST 2008
@@ -0,0 +1,34 @@
+<html xmlns:concordion="http://www.concordion.org/2007/concordion">
+<link href="../../../concordion.css" rel="stylesheet" type="text/css" />
+<body>
+
+    <h1>Demo</h1>
+
+    <p>
+    	After a user logs into the system, a greeting is
+    	displayed saying "Hello [user's first name]!"
+    </p>
+
+    <div class="example">
+
+		<h3>Example</h3>
+		
+        <p>
+            When user <b concordion:set="#firstName">Bob</b>
+            logs in, the greeting will be:
+            <b concordion:assertEquals="greetingFor(#firstName)">Hello Bob!</b>
+        </p>
+        
+        <p>
+            The first name <span concordion:assertTrue="#firstName.startsWith(#letter)">starts 
+            with <b concordion:set="#letter">X</b></span>.
+        </p>
+        
+        <p>
+            The first name <span concordion:assertTrue="#firstName.startsWith(#letter)">starts 
+            with <b concordion:set="#letter">B</b></span>.
+        </p>
+    </div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/org/concordion/internal/ConcordionBuilder.java
===================================================================
--- src/org/concordion/internal/ConcordionBuilder.java	(revision 34)
+++ src/org/concordion/internal/ConcordionBuilder.java	Wed Oct 01 05:49:15 BST 2008
@@ -22,19 +22,19 @@
     private Source source = new ClassPathSource();
     private Target target = null;
     private CommandRegistry commandRegistry = new CommandRegistry();
-    private DocumentParser documentParser = new DocumentParser(commandRegistry);
+    protected DocumentParser documentParser = new DocumentParser(commandRegistry);
     private SpecificationReader specificationReader;
     private EvaluatorFactory evaluatorFactory = new OgnlValidatingEvaluator.Factory();
     private SpecificationCommand specificationCommand = new SpecificationCommand();
-    private AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
-    private ExecuteCommand executeCommand = new ExecuteCommand(documentParser);
-    private VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand(documentParser);
+    protected AssertEqualsCommand assertEqualsCommand = new AssertEqualsCommand();
+    protected ExecuteCommand executeCommand = new ExecuteCommand(documentParser);
+    protected VerifyRowsCommand verifyRowsCommand = new VerifyRowsCommand(documentParser);
     private File baseOutputDir;
     private ThrowableCaughtPublisher throwableListenerPublisher = new ThrowableCaughtPublisher();
-    private AssertBooleanCommand assertTrueCommand = new AssertBooleanCommand(true);
-    private AssertBooleanCommand assertFalseCommand = new AssertBooleanCommand(false);
+    protected AssertBooleanCommand assertTrueCommand = new AssertBooleanCommand(true);
+    protected AssertBooleanCommand assertFalseCommand = new AssertBooleanCommand(false);
     private ThrowableCatchingDecorator throwableCatchingDecorator = new ThrowableCatchingDecorator();
-    private SetCommand setCommand = new SetCommand();
+    protected SetCommand setCommand = new SetCommand();
 
     {
         baseOutputDir = getBaseOutputDir();
@@ -100,7 +100,7 @@
         return this;
     }
 
-    private ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
+    protected ConcordionBuilder withApprovedCommand(String namespaceURI, String commandName, Command command) {
         commandRegistry.register(namespaceURI, commandName, command);
         return this;
     }
Index: src/org/concordion/internal/DocumentParser.java
===================================================================
--- src/org/concordion/internal/DocumentParser.java	(revision 34)
+++ src/org/concordion/internal/DocumentParser.java	Sat Sep 27 16:31:02 BST 2008
@@ -57,6 +57,8 @@
                     CommandCall commandCall = new CommandCall(command, new Element(xomElement), expression, resource);
                     parentCommandCall.appendChild(commandCall);
                     parentCommandCall = commandCall;
+                } else {
+                    throw new RuntimeException("Unknown command " + commandName + " in namespace " + namespaceURI + ".");
                 }
             }
         }
Index: src/org/concordion/integration/junit3/ConcordionTestCase.java
===================================================================
--- src/org/concordion/integration/junit3/ConcordionTestCase.java	(revision 34)
+++ src/org/concordion/integration/junit3/ConcordionTestCase.java	Wed Oct 01 05:55:09 BST 2008
@@ -6,10 +6,13 @@
 import org.concordion.internal.ConcordionBuilder;
 
 public abstract class ConcordionTestCase extends TestCase {
+    protected boolean isExpectedToPass() {
+            return true;
+        }
 
     public void testProcessSpecification() throws Throwable {
         ResultSummary resultSummary = new ConcordionBuilder().build().process(this);
         resultSummary.print(System.out);
-        resultSummary.assertIsSatisfied();
+        resultSummary.assertIsSatisfied(isExpectedToPass());
     }
 }
Index: spec/spec/examples/NotExpectedToPassTest.java
===================================================================
--- spec/spec/examples/NotExpectedToPassTest.java	Sat Sep 27 08:08:27 BST 2008
+++ spec/spec/examples/NotExpectedToPassTest.java	Sat Sep 27 08:08:27 BST 2008
@@ -0,0 +1,13 @@
+package spec.examples;
+
+import org.concordion.integration.junit3.ConcordionTestCase;
+
+public class NotExpectedToPassTest extends ConcordionTestCase {
+
+    public String greetingFor(String firstName) {
+        return String.format("Hello %s!", firstName);
+    }
+    protected boolean isExpectedToPass () {
+        return false;
+    }
+}
\ No newline at end of file
Index: src/org/concordion/integration/junit4/FixtureMethodRoadie.java
===================================================================
--- src/org/concordion/integration/junit4/FixtureMethodRoadie.java	(revision 34)
+++ src/org/concordion/integration/junit4/FixtureMethodRoadie.java	Sat Sep 27 08:00:59 BST 2008
@@ -21,7 +21,7 @@
         try {
             ResultSummary resultSummary = new ConcordionBuilder().build().process(fTest);
             resultSummary.print(System.out);
-            resultSummary.assertIsSatisfied();
+            resultSummary.assertIsSatisfied(true);
         } catch (Throwable e) {
             addFailure(e);
         }
Index: src/org/concordion/internal/OgnlValidatingEvaluator.java
===================================================================
--- src/org/concordion/internal/OgnlValidatingEvaluator.java	(revision 34)
+++ src/org/concordion/internal/OgnlValidatingEvaluator.java	Tue Sep 30 19:56:53 BST 2008
@@ -80,6 +80,7 @@
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + "#HREF");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_CALL_NO_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_CALL_PARAMS);
         regexs.add(LHS_VARIABLE_PATTERN + TERNARY_STRING_RESULT);
@@ -95,7 +96,6 @@
                 return;
             }
         }
-        throw new RuntimeException("Invalid expression [" + expression + "]");
     }
 
     public static void validateSetVariableExpression(String expression) {
@@ -109,6 +109,7 @@
         regexs.add(RHS_VARIABLE_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + "\\." + PROPERTY_NAME_PATTERN);
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + PROPERTY_NAME_PATTERN);
+        regexs.add(LHS_VARIABLE_PATTERN + " *= *" + "#HREF");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *\\)");
         regexs.add(LHS_VARIABLE_PATTERN + " *= *" + METHOD_NAME_PATTERN + " *\\( *" + RHS_VARIABLE_PATTERN + "(, *" + RHS_VARIABLE_PATTERN + " *)*\\)");
 
